import * as change_case from "change-case";
import * as handlebars from "handlebars";
import { TableClass } from "./table-class";
const TEMPLATE = `/**
 * Autogenerated, do not modify
 */
/* tslint:disable */
import * as Knex from "knex";
{{#each imports}}{{{this}}}
{{/each}}

export default class Getter {
    constructor(private knex: Knex) {

    }

    private async getFromTable(tableName: string, limit: number = 1000, fn?: (knex: Knex.QueryBuilder) => Knex.QueryBuilder): Promise<any[]> {
        let query = this.knex(tableName).select().limit(limit);
        if (fn) {
          query = fn(query);
        }
        return await query;
    }

    private async countTable(tableName: string, fn?: (knex: Knex.QueryBuilder) => Knex.QueryBuilder): Promise<number> {
        let query = this.knex(tableName).select(this.knex.raw("count(*) as c"));
        if (fn) {
          query = fn(query);
        }
        const reply: Array<{ c: number }> = await query;
        return reply[0].c;
    }

{{#each getters}}{{{this}}}{{/each}}
{{#each counters}}{{{this}}}{{/each}}
}`;
const GET_TEMPLATE = `
    public get{{fnPlural}}(limit: number = 1000, fn?: (knex: Knex.QueryBuilder) => Knex.QueryBuilder): Promise<{{prefixedClassName}}[]> {
        return this.getFromTable("{{tableName}}", limit, fn);
    }
`;
const COUNT_TEMPLATE = `
    public count{{fnPlural}}(fn?: (knex: Knex.QueryBuilder) => Knex.QueryBuilder): Promise<number> {
        return this.countTable("{{tableName}}", fn);
    }
`;

export class GettersBuilder {
    private compiledTemplate: HandlebarsTemplateDelegate;
    private compiledGetTemplate: HandlebarsTemplateDelegate;
    private compiledCountInsertTemplate: HandlebarsTemplateDelegate;

    constructor() {
        this.compiledTemplate = handlebars.compile(TEMPLATE);
        this.compiledGetTemplate = handlebars.compile(GET_TEMPLATE);
        this.compiledCountInsertTemplate = handlebars.compile(COUNT_TEMPLATE);
    }

    public renderInserter(tables: TableClass[], relativePath: string = "./"): string {
        tables = JSON.parse(JSON.stringify(tables));
        
        tables.forEach(t => {
            t.fnName = change_case.upperCaseFirst(t.fnName);
            t.fnPlural = change_case.upperCaseFirst(t.fnPlural);
        });
        const input = {
            getters: tables.map(t => this.compiledGetTemplate(t)),
            imports: tables.map(t => this.renderImportRow(t, relativePath)),
            counters: tables.map(t => this.compiledCountInsertTemplate(t))
        };
        return this.compiledTemplate(input);
    }

    private renderImportRow(table: TableClass, relativePath: string): string {
        table = JSON.parse(JSON.stringify(table));
        table.filename = table.filename.replace(".ts", "");
        return `import {${table.prefixedClassName}} from "${relativePath}${table.filename}"`;
    }
}
