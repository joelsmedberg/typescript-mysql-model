import { IDatabaseColumn, IDatabaseTable } from "./mysql-database-definition";
import * as Handlebars from "handlebars";
import * as changeCase from "change-case";
const template = `/**
 * Autogenerated interface, DO NOT MODIFY
 */
/* tslint:disable */

import { {{imports}} } from "graphql";

const {{name}}InputType = new GraphQLInputObjectType({
  fields: {
    {{fields}}
  },
  name: "{{name}}Input"
})

const {{name}}Type = new GraphQLObjectType({
  fields: {
    {{fields}}
  },
  name: "{{name}}"
});

export { {{name}}Type };
`;

export default class GraphQlBuilder {
  private compiledTemplate = Handlebars.compile(template);
  private readonly mysqlTypes: { [key: string]: string } = {
    blob: "string",
    bigint: "string",
    char: "string",
    date: "string",
    datetime: "string",
    decimal: "float",
    double: "float",
    float: "float",
    int: "int",
    longblob: "string",
    longtext: "string",
    mediumtext: "string",
    set: "string",
    smallint: "int",
    text: "string",
    timestamp: "string",
    tinyint: "boolean",
    varchar: "string"
  };

  public renderTs(table: IDatabaseTable, tableName: string): string {
    
    let types = Object.keys(table).map(colName => this.toGraphType(table[colName].type));
    types.push("GraphQLObjectType");
    types.push("GraphQLInputObjectType");
    types = types.filter((item, pos, self) => self.indexOf(item) === pos).sort();
    const imports = types.join(", ");
    
    const rows = Object.keys(table).map(colName => this.buildTypeRow(table[colName]));
    const fields= rows.join(", \n \t\t");

    const name = changeCase.pascalCase(tableName);
    const t = this.compiledTemplate({ fields, name, imports });
    // console.log(t);
    return t;
  }

  private toGraphType(mysql: string): string {
    const s = this.mysqlTypes[mysql];
    switch (s) {
      case "string":
        return "GraphQLString";
      case "float":
        return "GraphQLFloat"
      case "int":
        return "GraphQLInt"
      case "boolean":
        return "GraphQLBoolean";
      default:
        throw "unknown type " + mysql;
    }
  }

  private buildTypeRow(col: IDatabaseColumn): string {
    const graphType = this.toGraphType(col.type);
    return `${col.field}: { type: ${graphType} }`;
  }

}
