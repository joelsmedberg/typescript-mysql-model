import { ISetting } from "./isetting";
import { IDatabaseColumn, IDatabaseTable } from "./mysql-database-definition";
import { TableClass } from "./table-class";

export default class InterfaceBuilder {
  constructor(private settings: ISetting, private mysqlTypes: { [key: string]: string }) {

  }

  public renderTs(tableClass: TableClass, table: IDatabaseTable): string {    
    let stringBuilder = this.settings.defaultClassModifier + " " + tableClass.prefixedClassName + " { \n";
    for (const colName in table) {
      stringBuilder += this.buildTypeRow(table[colName]);
    }
    stringBuilder += "}\n";

    return this.getMetaText() + stringBuilder;
  }

  private getMetaText(): string {
    let meta = `/**\n * Autogenerated interface, DO NOT MODIFY\n */\n`;
    meta +="/* tslint:disable */\n";
    return meta;
  }

  private buildTypeRow(col: IDatabaseColumn): string {
    const tabs = "\t";
    const optional = this.settings.optionalParameters ? "?" : "";
    const tsType = this.getTsType(col.type);
    const field = col.field;
    return `${tabs}"${field}"${optional}: ${tsType};\n`;
  }

  private getTsType(type: string): string {
    let ts = this.mysqlTypes[type];
    if (!ts) {
      // tslint:disable-next-line:no-console
      console.error("Unknown type " + type);
      ts = "any";
    }
    return ts;
  }
}
