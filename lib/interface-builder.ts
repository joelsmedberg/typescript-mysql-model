import * as pluralize from "pluralize";
import { DatabaseColumn, DatabaseTable } from "./mysql-database-definition";
import * as change_case from "change-case";
export default class InterfaceBuilder {
  constructor(private settings:{singularizeClassNames: boolean; defaultClassName: string; optionalParameters: boolean;}, private mysqlTypes: {[key:string]:string}){
    
  }
  private buildTypeRow(col: DatabaseColumn): string {
    let tabs = "\t";
    let optional = this.settings.optionalParameters?"?":"";
    let tsType = this.getTsType(col.type);
    let field = col.field;
    return `${tabs}"${field}"${optional}: ${tsType};\n`;
  }
  
  renderTs(tableName: string, table:DatabaseTable):string {
      let className = this.getClassName(tableName);

      var stringBuilder = this.settings.defaultClassName + " " + className + " { \n";
      for (var colName in table) {
          stringBuilder += this.buildTypeRow(table[colName]);
      }        
      stringBuilder += "}";
      let meta = `/**\n* Autogenerated interface, DO NOT MODIFY\n*/\n`;
      return meta + stringBuilder;
  }  

  private getTsType(type: string): string  {
    var ts = this.mysqlTypes[type];
    if (!ts) {
        console.error("Unknown type " + type);
        ts = "any";
    }
    return ts;
  }

  private getClassName(tableName: string):string {
    let name = this.settings.singularizeClassNames ? pluralize.singular(tableName):tableName;        
    return change_case.pascalCase(name);
  }
}